include::global_attr.adoc[]
= Windows überwachen
:revdate: 2019-10-10
:title: Der Agent für Windows im Detail
:description: Quelloffen und ohne Abhängigkeiten ermöglicht es der Windows-Agent Server sicher zu überwachen. Hier erfahren Sie alles über die Installation/Konfiguration.

{related-start}
link:wato_monitoringagents.html[Monitoringagenten]
link:agent_deployment.html[Automatische Agenten-Updates]
link:datasource_programs.html[Datenquellenprogramme]
{related-end}


== Einleitung

Die Überwachung von Windows-Servern war von Anfang an eine der
wichtigsten Aufgaben von {CMK}. Wie für alle anderen Server-Betriebssysteme
liefert {CMK} daher auch für Windows einen eigenen Agenten aus. Dieser hat
gegenüber einen Überwachung mit WMI oder SNMP etliche Vorteile, denn er ist:

* *Minimalistisch*, denn er begnügt sich mit minimalen Ressourcen an RAM, CPU und Netzwerk.
* *Sicher*: denn er liest keine Daten aus dem Netzwerk. Dadurch wird jeglicher externe Zugriff auf das System unterbunden.
* *Umfassend*, denn er hat Zugriff auf wichtige Daten, die per WMI oder SNMP nicht erreichbar sind.
* *Leicht erweiterbar*, denn Sie können Erweiterungen in einer beliebigen Programmier- oder Skriptsprache schreiben.
* *Offen*, denn obwohl der Agent als ausführbare Datei ausgeliefert wird, haben Sie jederzeit Zugriff auf den Quellcode und können den Agenten daher prinzipiell auch selbst kompilieren und haben jederzeit Einsicht in die Funktionalität. Es wird kein unbekannter Code verwendet.

Die Installation und Einrichtung des Agenten ist sehr einfach und mit wenigen
Schritten erledigt, denn dieser braucht für seine Funktion zum Beispiel
keine zusätzlichen Bibliotheken. Zudem wird er mit einer Grundkonfiguration
ausgeliefert, welche für die meisten Anwendungsfälle ausreicht.

Im Betrieb besteht der Agent aus einem Windows-Dienst, welcher das
mitgelieferte Programm -- den Agent -- startet. Dieser sammelt bei einem
Aufruf Daten zu dem lokalen System und stellt diese dem Monitoring, wie bei
anderen Agenten auch, über Port 6556 zur Verfügung.

In den {CEE} können Sie den Agenten mithilfe der
link:agent_deployment.html[automatischen Agenten-Updates] automatisch zentral
updaten und konfigurieren. Alternativ können Sie
das MSI-Paket auch über andere Wege, wie zum Beispiel das Microsoft Active
Directory verteilen. Die Installation kann hier durch das MSI-Format komplett
automatisiert werden.

Neu ist ab {v16}, dass der Agent komplett überarbeitet wurde. Dieser
Artikel bezieht sich daher hauptsächlich auf den aktuellen Agenten. Der alte
verhält sich grundsätzlich äquivalent zu dem neuen. Die Unterschiede
werden weiter unten in einem eigenen link:agent_windows.html#legacy[Abschnitt]
beschrieben. Dort finden Sie auch Informationen zu der Migration, falls Sie
auf Ihren Systemen noch den alten Agenten installiert haben.

Aus Kompatibilitätsgründen werden nur die Hauptversionen von Windows
unterstützt. Die folgende Tabelle listet diese noch einmal explizit auf:

[cols=3]
|===
|Version |Edition |Agent 

|NT 5.1 |Windows XP |Alter Agent
|NT 5.2 |Windows XP x64 Edition |Alter Agent
|NT 5.2 |Windows Server 2003 |Alter Agent
|NT 6.0 |Windows Vista |Aktueller Agent
|NT 6.0 |Windows Server 2008 |Aktueller Agent
|NT 6.1 |Windows 7 |Aktueller Agent
|NT 6.1 |Windows 2008 R2 |Aktueller Agent
|NT 6.2 |Windows 8 |Aktueller Agent
|NT 6.2 |Windows Server 2012 |Aktueller Agent
|NT 6.3 |Windows 8.1 |Aktueller Agent
|NT 6.3 |Windows 2012 R2 |Aktueller Agent
|NT 6.4 / NT 10.0 |Windows 10 |Aktueller Agent
|NT 6.4 / NT 10.0 |Windows Server 2016 |Aktueller Agent
|NT 6.4 / NT 10.0 |Windows Server 2019 |Aktueller Agent
|===


*Wichtig*: Editionen, die in der Tabelle nicht erwähnt werden, werden
nicht offiziell unterstützt. Dazu gehört zum Beispiel auch _Windows
Embedded_.


== Installation des Agenten

=== Verschiedene Möglichkeiten

{CMK} bietet Ihnen für die Installation des Windows-Agenten verschiedene Wege -- von der
manuellen Installation der Einzelteile bis hin zum vollautomatischen Deployment.
Manche davon stehen nur in den {CEE} zur Vefügung:

[cols="40,50,~,~"]
|===
|Methode |Beschreibung |CRE |CEE 

|Mitgeliefertes MSI-Paket |Einfache Installation eines Standard-Agenten mit manueller Konfiguration über Konfigurationsdateien. |X |X
|MSI-Paket aus der link:wato_monitoringagents.html#bakery[Agentenbäckerei] |Konfiguration über die GUI, individuelle Konfiguration pro Host möglich. | |X
|link:agent_deployment.html[Automatisches Updaten] |Das Paket aus der Agentenbäckerei wird erstmalig von Hand oder per Skript installiert und von da an automatisch aktualisiert. | |X
|===



=== Installation per MSI-Paket

Unabhängig davon, ob Sie die MSI-Pakete über die
link:wato_monitoringagents.html#bakery[Agentenbäckerei] erstellen lassen,
oder auf jedem Host manuell konfigurieren: Sie benötigen zuerst die
Installationsdatei. Diese finden sie in WATO unter icon:icon_agents[]
[.guihint]#Monitoring Agents#. Falls Sie eine der {EE} einsetzen, gehen Sie vorher
noch den Umweg über den Knopf [.guihint]#Agent files#:

image::packaged_agents.png[]

In [.guihint]#Packaged Agents# finden die benötigte
Datei [.guihint]#check_mk_agent.msi#. Laden Sie diese Datei auf den Host und starten
Sie die Installation. Prinzipiell müssen Sie nur dem Menü folgen und die
Lizenzbedingungen der [.guihint]#GNU GENERAL PUBLIC LICENSE# lesen und zustimmen. In
dem Menüpunkt [.guihint]#Destination Folder# können Sie einen alternativen Pfad
bestimmen, in dem der Agent installiert werden soll. Andernfalls wird er in
unter dem Standardpfad `%ProgramFiles(x86)%\checkmk\` installiert. Dieser Pfad
wird aus Kompatibilitätsgründen benutzt und ist unabhängig davon, ob der Agent auf ein 32- oder
64-Bit Betriebssystem installiert wird. Die Installationsroutine wählt automatisch
den richtigen Agenten aus.

image::auto_delete_legacy_agent.png[width=80%]

Nach der Installation wird der Agent sofort als Windowsdienst gestartet und
ist für die Überwachung des Systems bereit.


==== Unbeaufsichtigte Installation

Windows bietet über `msiexec` die Möglichkeit, Installationen von
MSI-Paketen automatisiert durchzuführen. Eine automatisierte Installation kann dann
zum Beispiel folgendermaßen aussehen:

[{shell}]
----
C:\Users\hhirsch\Downloads\> msiexec /i check_mk_agent.msi /qn
----

In diesem Fall wird der Agent unter dem Standardpfad installiert und ebenfalls
sofort als Windowsdienst gestartet. Diese Methode eignet sich also hervorragend zum
automatischen Ausrollen des Agenten auf viele Hosts.

[#firewall]
==== Windows Firewall

In einigen Fällen kann {CMK} nicht auf einen Windows-Host zugreifen, obwohl
das Paket richtig installiert wurde und der Service auch läuft (siehe auch
im Abschnitt über die link:agent_windows.html#testing[Fehlerdiagnose]). In solchen Fällen kann die
Firewall das Problem sein. Leider kann der Agent selbst nicht testen, ob er
von außen erreichbar ist. Prüfen Sie das daher und setzen Sie gegebenenfalls
eine Firewallregel für den Agenten in der [.guihint]#Windows Firewall with Advanced Security#
([.guihint]#WF.msc#). Alternativ können Sie auch diesen Schritt
automatisieren und die Regel direkt auf der Kommandozeile setzen. Passen
Sie den folgenden Befehl gegebenenfalls ihrem angepassten Installationspfad an:

[{shell}]
----
C:\Windows\System32> netsh advfirewall firewall add rule name="Check_MK" ^
description="Monitoring" dir=in localport=6556 protocol=tcp action=allow ^
program="%ProgramFiles(x86)%\checkmk\service\check_mk_agent.exe" ^
profile=private,domain enable=yes
OK.
----

*Wichtig*: Der Befehl wurde zugunsten der Lesbarkeit in vier Zeilen aufgeteilt.


=== Installation mit der Agent-Bakery

{cee-only}
Die {CEE} verfügt auch für den Agenten unter Windows die
Möglichkeit, diesen über die link:wato_monitoringagents.html#bakery[Agent-Bakery]
individuell über die Weboberfläche des WATO-Moduls zu konfigurieren. eine
ausführliche Beschreibung finden Sie im allgemeinen Kapitel über die
link:wato_monitoringagents.html[Agenten]. Die Installation des gebackenen MSI-Pakets
geschieht dann wieder genau, wie oben beschrieben.


=== Automatisches Updaten

{cee-only}
Wenn Sie die Agentenbäckerei verwenden, können Sie automatische Updates
des Agenten einrichten. Diese werden in einem link:agent_deployment.html[eigenen Artikel]
beschrieben.


== Architektur des Agenten

=== Verzeichnisse des Agenten

Der Agent gliedert sich in zwei Bereiche des Dateisystems auf:

* `C:\Program Files (x86)\checkmk\service\`: Hier werden programmspezifische Dateien installiert. Anpassungen sind hier nicht nötig.
* `C:\ProgramData\checkmk\agent\`: Hier werden hostspezifische Dateien gespeichert. Das Verhalten des Agenten wird hier konfiguriert und Plugins, Logs, etc. werden ebenfalls unterhalb dieses Verzeichnisses abgelegt. *Hinweis*: Normalerweise ist dieses Verzeichnis vom System als unsichtbar markiert.


=== Die Konfigurationsdateien des Agenten

Für die Konfiguration des Agenten liest dieser nacheinander und hierarchisch drei
Dateien ein:

. `C:\Program Files (x86)\checkmk\service\check_mk.yml`: Hier ist die Standardkonfiguration hinterlegt. Diese dürfen Sie nicht ändern.
. `C:\ProgramData\checkmk\agent\bakery\check_mk.bakery.yml`: Diese Datei wird von der Agentenbäckerei erstellt und überschreibt gegebenfalls einen Standardwert aus der vorherigen Datei.
. `C:\ProgramData\checkmk\agent\check_mk.user.yml`: In dieser Datei können Sie von Hand individuelle Anpassungen vornehmen, um eine Einstellung oder eine Erweiterung auf einem Host zu testen. Diese Datei wird nach der Konfiguration aus der Bakery eingelesen und überschreibt diese gegebenfalls.

Wie Sie vielleicht schon an der Dateiendung der Konfigurationsdateien
erkannt haben, wird als Konfigurationsformat link:https://yaml.org[YAML]
verwendet. Wir haben uns entschieden, ab Version {v16} dieses Format
zu verwenden, das es damit einfacher möglich ist, strukturierte
Daten zu konfigurieren, als mit dem klassischen INI-Format.

Für das manuelle Arbeiten mit dem Agenten ist also lediglich die letzte
Konfigurationsdatei (`check_mk.user.yaml`) relevant, weil sie als
letzte eingelesen wird und damit _das letzte Wort hat_. Wenn die
Agentenbäckerei nicht genutzt wird, ist sie sogar die einzige Datei, in
der Anpassungen an der Konfiguration des Agenten vorgenommen werden dürfen.


[#legacy]
== Installation des alten Agenten

=== Warum ein zweiter Agent?

In früheren Versionen von {CMK} hatte der Agent eine andere Architektur. Diese
hat sehr lange gut funktioniert und wurde erst ab {v16} durch eine
neue abgelöst, um alte Enden abzuschneiden, die Konfiguration zu vereinfachen
und letztendlich auch, um bessere Werkzeuge an der Hand zu haben, um zum
Beispiel Konfigurationsfehlern besser auf die Spur zu kommen.

Der alte Agent ist aus Kompatibilitätsgründen in {CMK} noch enthalten, da
nur dieser alte Plattformen wie Windows XP und Windows 2003 zuverlässig
überwachen kann. Diese beiden Systeme werden von dem neuen Agenten nicht
mehr unterstützt. Zusätzlich soll der alte Agent die Migration zu dem
aktuellen komfortabler gestalten. Dieser ist nach wie vor mit {CMK}
kompatibel, dass dass ein Update Ihres {CMK}-Servers auf Version {v16}
nicht automatisch auch ein Update der Agenten erfordert.


=== Besonderheiten des Agenten bis Version 1.5.0

Der alte Windows-Agent hat folgende Unterschiede:

* Unterschiedliche Nutzung der Verzeichnisse. Im alten Agenten ist das Installationsverzeichnis und das Konfigurationsverzeichnis dasselbe. Es wird ausschließlich das Verzeichnis `C:\Program Files (x86)\check_mk\` genutzt.
* Dadurch werden die verfügbaren Plugins nicht automatisch mit installiert, sondern müssen individuell vom {CMK}-Server runtergeladen und korrekt abgelegt werden.
* Die Konfiguration wird im alten Agenten in einer Initialisierungsdatei (`check_mk.ini`) festgehalten. Die Standardkonfiguration und die Agentenbäckerei nutzen die identische Datei. Lokale Anpassungen können über die Datei `check_mk_local.ini` vorgenommen werden, die sich im gleichen Verzeichnis befinden muss.
* Die Möglichkeiten tiefer in den Agenten einzusteigen sind stark eingeschränkt.


=== Migration zu dem neuen Standardagenten

Die Migration von einem bereits installierten Agenten auf den neuen Agenten
der {v16} ist sehr einfach. Rufen Sie schlicht das Installationspaket
des neuen Agenten (`check_mk_agent.msi`) auf und folgen Sie wie gewohnt
den Anweisungen. Bei der Installation werden Sie immer gefragt, ob eventuell
vorhandene Installationen des alten Agenten auch direkt deinstalliert werden
soll. Diese Option ist standardmäßig nicht aktiviert:

image::auto_delete_legacy_agent.png[width=80%]

Wenn Sie den alten Agenten zur Sicherheit noch behalten möchten, nutzen
Sie diese Option entsprechend nicht. Der alte Agent wird dann lediglich
gestoppt und deaktiviert. Unabhängig davon wird die Konfiguration des alten
Agenten als Teil des Installationsprozess in das neue Format übertragen
und als Benutzerkonfiguration (`check_mk.user.yml`) abgespeichert. Das
gibt Ihnen die Moglichkeit die Konvertierung anhand der Originaldatei zu
prüfen. Sobald Sie sicher sind, dass die Konvertierung erfolgreich war,
können Sie den alten Agenten deinstallieren.

Eine solche händische Prüfung werden Sie wahrscheinlich nur für
einzelne Hosts einer Gruppe machen wollen. Wenn Sie sich sicher sind,
dass die Konvertierung korrekt funktioniert, können Sie den alten Agenten
entsprechend automatisch deinstallieren lassen. Sie sparen sich dann die
manuelle Deinstallation und tauschen lediglich den alten Agenten durch den neuen aus.

*Wichtig*: Nachdem Sie den alten Agenten entfernt haben, kann es
sein, dass das Verzeichnis nicht vollständig gelöscht wurde. Das ist
kein Fehler, sondern reguläres Verhalten, wenn sich in dem zu löschenden
Verzeichnis Dateien befinden, die nicht über die Installationsroutine auf
das System gekommen sind. Das können zum Beispiel Plugins oder eigene
Konfigurationsdateien sein, die händisch von einem Benutzer angelegt
wurden. Löschen in solchen Fällen schlicht das Installationsverzeichnis
des alten Agenten nach der Deinstallation, nachdem Sie sichergestellt haben,
dass sich dort keine wichtigen Dateien mehr befinden.

==== Firewallregel auf den neuen Agenten anpassen

Wenn Sie den Agenten nicht frisch installieren, sondern von dem Legacy-Agenten
migrieren, müssen Sie gegebenenfalls auch die Firewall-Regel anpassen,
die Sie vorher angelegt hatten. Dabei müssen Sie keine neue Regel anlegen,
wie das link:agent_windows.html#firewall[oben] beschrieben ist. Stattdessen passen
Sie lediglich die bestehende Regel an. In dem folgenden Beispiel gehen wir
davon aus, dass die Regel den Namen "Check_MK" hat:

[{shell}]
----
C:\Windows\System32> netsh advfirewall firewall set rule name="Check_MK" ^
new program="%ProgramFiles(x86)%\checkmk\service\check_mk_agent.exe"

Updated 1 rule(s).
Ok.

----

Wenn das Programm _netsh_ die angegebene Regel finden konnte, wird das
Kommando dann auch entsprechend der Beispielausgabe quittiert. Sollten Sie
den Namen der Regel nicht (mehr) kennen, können Sie die Regel natürlich
auch über das grafische Tool _wf.msc_ anpassen.

[#testing]
== Test und Fehlerdiagnose

=== Prüfen der Konfiguration

Um zu prüfen, ob die Konfiguration so eingelesen wurde, wie Sie das erwarten,
rufen Sie den Agenten mit der Option `showconfig` auf. Mit
dieser Option bekommen Sie nicht nur die Konfiguration ausgegeben, wie sie
derzeit vom Agenten benutzt wird. Zusätzlich werden auch immer die benutzten
Umgebungsvariablen sowie die verwendeten Konfigurationsdateien angezeigt.

Ist nur ein bestimmter Teil der Konfiguration interessant, schränken Sie
die Ausgabe auf einen bestimmten Teil ein. Hier wird zum Beispiel geprüft,
ob die Optionen der Sektion ps korrekt gesetzt sind:

[{shell}]
----
C:\Program Files x86\checkmk\service> .\check_mk_agent.exe showconfig ps
# Environment Variables:
# MK_LOCALDIR="C:\ProgramData\checkmk\agent\local"
# MK_STATEDIR="C:\ProgramData\checkmk\agent\state"
# MK_PLUGINSDIR="C:\ProgramData\checkmk\agent\plugins"
# MK_TEMPDIR="C:\ProgramData\checkmk\agent\tmp"
# MK_LOGDIR="C:\ProgramData\checkmk\agent\log"
# MK_CONFDIR="C:\ProgramData\checkmk\agent\config"
# MK_SPOOLDIR="C:\ProgramData\checkmk\agent\spool"
# MK_INSTALLDIR="C:\ProgramData\checkmk\agent\install"
# MK_MSI_PATH="C:\ProgramData\checkmk\agent\update"
# Loaded Config Files:
# system: 'C:\Program Files (x86)\checkmk\service\check_mk.yml'
# bakery: 'C:\ProgramData\checkmk\agent\bakery'
# user  : 'C:\ProgramData\checkmk\agent\check_mk.user.yml'

# ps
enabled: yes
use_wmi: yes
full_path: no
----

Über diesen Weg bekommen Sie einen schnellen Überblick, wie die drei
verschiedenen Konfigurationsdateien von dem Agenten zusammengeführt und
benutzt werden. Fehler werden somit sofort sichtbar.


=== Den Agenten testen

Es gibt unter Windows verschiedene Möglichkeiten, den Agenten auf seine
Funktion zu testen. Mit der Option `help` bekommen Sie eine Übersicht,
welche Diagnosemöglichkeiten der Agent im Einzelnen bietet. Die wichtigsten
sollen hier vorgestellt werden.


==== Lokal testen

Mit der Option `test` können Sie den Agenten direkt lokal ausführen
und sofort sehen, ob eine Ausgabe fehlerfrei erzeugt werden kann. Aus
Platzgründen werden hier nur die ersten Zeilen als Beispiel gelistet:

[{shell-raw}]
----
C:\Program Files x86\checkmk\service> .\check_mk_agent.exe test
<<<check_mk>>>
Version: 1.6.0b8
BuildDate: Sep  4 2019
AgentOS: windows
Hostname: MSEDGEWIN10
Architecture: 64bit
WorkingDirectory: C:\Program Files (x86)\checkmk\service
----


// Beschreibung deaktiviert, weil Real-Time-Checks überhaupt noch gar nicht beschrieben sind oder eingeführt wurden.
// Auf ähnliche Weise können Sie auch die Real-Time-Checks testen
// und sehen, in welchem Zeitintervall die Werte ausgegeben werden
// können. Beachten Sie, dass diese Option auf einen Startsignal wartet und
// sich auch erst beendet, wenn Sie das Signal dazu geben:
//
// R+:
// UP(C:\Program Files x86\checkmk\service>):.\check_mk_agent.exe rt
// Press any key to START testing Realtime Sections
// Realtime kick from '127.0.0.1' mem:true df:true winperf:true
// df: Processed [1] drives
// <<<df:sep(9)>>>
// Windows_10      NTFS    41940988        21548916        20392072        52%     C:\
// <<<mem>>>
// MemTotal:      4193844 kB
// MemFree:       2150888 kB
// SwapTotal:     1441792 kB
// SwapFree:      685112 kB
// PageTotal:     5635636 kB
// PageFree:      2836000 kB
// VirtualTotal:  137438953344 kB
// VirtualFree:   137434635112 kB
// <<<winperf_processor>>>
// 1567626718.01 238 10000000
// 3 instances: 0 1 _Total
// -232 247981250000 247822031250 247901640625 100nsec_timer_inv
// -96 26199531250 28962031250 27580781250 100nsec_timer
// -94 11261562500 8653750000 9957656250 100nsec_timer
// -90 29692411 30441622 60134033 counter
// 458 97343750 817968750 457656250 100nsec_timer
// 460 230000000 653750000 441875000 100nsec_timer
// 1096 740994 1492053 2233047 counter
// 1098 0 0 0 rawcount
// 1508 241094017545 241103467681 241098742613 100nsec_timer
// 1510 241094017545 241103467681 241098742613 100nsec_timer
// 1512 0 0 0 100nsec_timer
// 1514 0 0 0 100nsec_timer
// 1516 21353597 22183421 43537018 bulk_count
// 1518 0 0 0 bulk_count
// 1520 0 0 0 bulk_count
// Press any key to STOP testing Realtime Sections
// R-:


==== Testen vom Monitoringserver aus

Wenn ein Problem nicht lokal vorhanden ist, haben Sie mit der Option
`-io` eine weitere Möglichkeit, den Agenten auch von außen
zu prüfen. Diese Option startet den Agenten kurzfristig als Service
und protokolliert dann jede Verbindung, die von außen zu diesem Service
hergestellt wird. Auf diese Weise können sie prüfen, ob eine Anfrage auch
wirklich den Host erreicht. Bitte beachten Sie, dass der Windows-Service
des Agenten nicht laufen darf, damit dieser Test funktioniert. Stoppen Sie
daher vorher den Service und führen Sie danach den Test durch:

[{shell}]
----
C:\Program Files x86\checkmk\service> .\check_mk_agent.exe check -io
testing 10 seconds
Starting IO ipv6:false, used port:6556
Connected from '192.168.42.1' ipv6 :false -> queue
Put on queue, size is [1]
Found connection on queue, in queue left[0]
Connected from '192.168.42.1' ipv6:false <- queue
No data to send
Shutting down IO...
Stopping execution
Exiting process queue
cma::world::ExternalPort::ioThreadProc:  terminated from outside
IO ends...
----

Mögliche Fehler werden ebenfalls in diesem Test protokolliert, so dass Sie
bei einem Fehlerfall besser herausfinden können, wo die Ursache des Problems
zu suchen ist.


=== Weitere Debugmöglichkeiten

Der Agent bietet über die bereits beschriebenen Optionen noch weitere
Möglichkeiten viele Details über das konkrete Verhalten des Agenten
herauszufinden. Mit der Option `help` bekommen Sie unter anderem eine
ausführliche und vollständige Liste an Möglichkeiten, die Ihnen über
die hier beschriebenen hinaus zur Verfügung stehen.
// Unbefriedigend. Sollte ausführlicher beschrieben werden?


[#mrpe]
== Einbinden von klassischen Check-Plugins

=== Grundsätzliche Konfiguration

Unter Windows können Sie weiterhin ihre Nagios-basierten Plugins auf einem
Host ausführen, falls es dazu noch kein Pendant in {CMK} geben sollte. Der
Mechanismus dafür ist recht simpel: Sie nutzen dafür das MRPE-Feature von
{CMK}, welches sich analog zu dem NRPE von Nagios verhält.

Standardmäßig ist die Berücksichtigung von MRPE-Plugins aktiviert. Falls Sie
diese Funktion nicht nutzen wollen, können Sie sie in der Konfigurationsdatei
deaktivieren, indem Sie die folgende Definition hinzufügen:

.C:\ProgramData\CheckMK\Agent\check_mk.user.yml
[{file}]
----
mrpe:
  enabled: no
----


==== Die Ausführzeit begrenzen

Manchmal ist die Laufzeit eines Skripts oder Nagios-Plugins nicht vorhersehbar
und im schlimmsten Fall wird ein Plugin nie beendet. Um hier die Kontrolle zu
wahren, können Sie die maximale Laufzeit der MRPE-Plugins begrenzen. Der hier
gezeigte Wert ist auch gleichzeitig der Standardwert in Sekunden. Passen Sie
ihn also nur an, wenn Sie ein kürzeres oder längeres Intervall festlegen
möchten:

.C:\ProgramData\CheckMK\Agent\check_mk.user.yml
[{file}]
----
mrpe:
  # enabled: yes
  timeout: 60
----


=== Plugins über MRPE ausführen

Um dem Agenten mitzuteilen, wo sich die auszuführende Datei befindet und
wie diese aufzurufen ist, fügen Sie einen Eintrag in der Konfiguration des
MRPE hinzu:

.C:\ProgramData\CheckMK\Agent\check_mk.user.yml
[{file}]
----
mrpe:
  config:
    - check = MyServiceName 'C:\ProgramData\CheckMK\Agent\mrpe\my_check_plugin.bat' -w 10 -c 20 MyParameter
----

Die Datei ebenfalls in dem Verzeichnis des Agenten abzulegen ist keine
Voraussetzung, auch wenn es sich anbietet, um alle an einem gemeinsamen Ort
abzulegen. In dieser Beispielkonfiguration sehen Sie nun folgende Elemente
der relevanten Zeile:

[cols="32,~"]
|===
|Element |Beschreibung 

|`MyServiceName` |Der Servicename, wie er in {CMK} angezeigt werden soll
|`'C:\ProgramData\CheckMK\Agent\mrpe\my_check_plugin.bat'` |Das Skript oder Programm, welches aufgerufen werden soll. Da Pfade und Dateinamen unter Windows Leerzeichen enthalten dürfen, markieren die Klammern die Zusammengehörigkeit des Ausdrucks.
|`-w 10 -c 20 |Diesem Skript wurden Optionen übergeben. In diesem Fall ein Schwellwert von 10 für {WARN} und ein Schwellwert von 20 für {CRIT}.
|`MyParameter` |Dem Skript wurde zuletzt noch ein Parameter übergeben, welches nicht zu einer bestimmten Option gehört.
|===


Nachdem Sie das MRPE-Plugin eingerichet haben, ist es direkt und ohne Neustart
des Agenten aktiv und wird der Ausgabe hinzugefügt. In der Serviceerkennung
werden Sie nun ihren neuen Service automatisch finden:

[{image-border}]
image::agent_windows_service_discovery.png[]


=== MRPE mit der Agentenbäckerei

{cee-only}
Alternativ zu der Konfiguration direkt auf einem Host in der
benutzerspezifischen Konfigurationsdatei können Sie Ihre MRPE-Plugins auch
direkt in der Weboberfläche definieren. Benutzen Sie dazu den Regelsatz
[.guihint]#Monitoring Agents > Generic Options > Execute MRPE Checks#. Der notwendige
Eintrag wird dann automatisch in der link:agent_windows.html#files[Konfigurationsdatei der Bakery]
erzeugt.


[#plugins]
== Erweitern um Agenten-Plugins

=== Was sind Plugins?

Der Standardagent enthält eine ganze Reihe von Sektionen, welche
Überwachungsdaten für diverse Check-Plugins liefern und dann von der
Serviceerkennung automatisch gefunden und als Services ausgegeben werden. Dazu
gehören vor allem die wichtigen Überwachungen des Betriebssystems.

Darüber hinaus gibt es die Möglichkeit den Agenten um Agentenplugins zu
erweitern. Das sind kleine Skripten oder Programme, die vom Agenten aufgerufen
werden und diesen um weitere Sektionen mit zusätzlichen Monitoring-Daten
erweitern. Das {CMK}-Projekt liefert hier bereits eine ganze Reihe solcher
Plugins mit aus, welche -- wenn sie korrekt installiert und konfiguriert sind --
in der Serviceerkennung ebenfalls automatisch in neue Services münden.

Warum sind diese Plugins nicht einfach in den Standardagenten fest integriert? Für jedes der Plugins gibt es einen der folgenden Gründe:

* Das Plugin kann seine Daten nur über interne Schnittstellen holen, die der Standardagent nicht bereitstellt (Beispiel: Powershell).
* Das Plugin benötigt ohnehin eine Konfiguration, ohne die es nicht funktionieren würde (Beispiel: `mk_oracle.ps1`).
* Das Plugin ist so speziell, dass es von den meisten Anwendern nicht benötigt wird  (Beispiel: `citrix_licenses.vbs`).


=== Manuelle Installation von Plugins

{CMK} liefert wie bereits erwähnt eine ganze Reihe an Plugins für Windows
mit. Sie finden diese auf dem überwachten Host in dem Installationsverzeichnis
des Agenten. Dort werden alle verfügbaren Plugins immer direkt mit
dem Agenten abgelegt, damit Sie auch direkt zur Verfügung stehen:
`C:\Program Files (x86)\checkmk\service\plugins`. Alternativ
finden Sie die Plugins auch auf dem {CMK}-Server selbst unter
`local/share/check_mk/agents/windows/plugins`. Auch über die
Downloadseite der Agenten im WATO (wie am Anfang des Artikels beschrieben)
sind diese im Kasten [.guihint]#Windows Agent - Plugins# verfügbar.
Hier ein Auszug:

image::agent_windows_files_plugins_.png[]

Zu allen von uns mitglieferten Agentenplugins gibt es auch passende
Check-Plugins, welche die erhobenen Daten auswerten und Services erzeugen
können. Sie müssen also nichts zusätzlich auf dem {CMK}-Server installieren.

*Wichtig*: Werfen sie einen Blick in ein Agentenplugin, bevor Sie es
auf einem Host installieren. Oft finden Sie dort wichtige Hinweise zu der
korrekten Verwendung.

Die eigentliche Installation ist dann einfach. Kopieren Sie das gewünschte
Plugin entweder vom {CMK}-Server oder aus dem Installationsverzeichnis
nach `C:\ProgramData\CheckMK\Agent\plugins`. Wenn das Plugin in diesem
Verzeichnis liegt, wird es vom Agenten automatisch aufgerufen und es entsteht
eine neue Sektion in der Agentenausgabe. Diese trägt üblicherweise den
gleichen Namen wie das Plugin. Komplexe Plugins (z.B. `mk_oracle.ps1`)
erzeugen sogar eine ganze Reihe an neuen Sektionen.


=== Konfiguration der Plugins

Manche Plugins benötigen eine Konfigurationsdatei in
`C:\ProgramData\CheckMK\Agent\config`, damit sie funktionieren
können. Bei anderen ist eine Konfiguration optional (z.B. `mssql.vbs`)
und ermöglicht besondere Features oder Anpassungen. Wieder andere
funktionieren ohne weitere Schritte. Sie haben verschiedene Quellen, um an
Informationen zu kommen:

* Die Dokumentation der zugehörgen Check-Plugins im WATO-Modul [.guihint]#Check plugins#
* Kommentare im Plugin selbst (oft sehr hilfreich!)
* Einen passenden Artikel in diesem Handbuch (z.B. über das Überwachen von link:monitoring_oracle.html[Oracle])

Auch bei speziellen (Skript)-Sprachen kann es notwendig sein, diese erst in
der Konfiguration des Agenten _freizuschalten_. So werden beispielsweise
Python-Skripte nicht ausgeführt, wenn sie nicht explizit freigegeben
wurden. Sie können hier schlicht in der `check_mk.user.yml` in der
Sektion `global` die Dateiendungen erweitern, wie in dem folgenden
Ausschnitt zu sehen:

.D:\ProgramData\checkmk\agent\check_mk.user.yml
[{file}]
----
global:
    execute: exe bat vbs cmd ps1 py
----

*Wichtig*: Der Einsatz solcher Plugins setzt natürlich voraus, dass
die Dateien auch in einer regulären Kommandozeile ohne spezielle Pfade
aufgerufen werden können. Im Fall von Python muss entsprechend korrekt
installiert und der Pfad zu dem Interpreter in den Umgebungsvariablen vorhanden
sein. Anleitungen, wie Sie Python korrekt einrichten, finden Sie direkt auf
den Seiten der
link:https://www.python.org/doc/[Python Software Foundation].

[#customizeexecution]
=== Ausführung eines speziellen Plugins anpassen

Jedes Plugin kann in unterschiedlichen Modi ausgeführt werden. Dabei stehen
die folgenden Optionen zur Verfügung. Der jeweils fett gedruckte Wert ist
der Standardwert:

[cols="12,15,~"]
|===
|Option |Wert |Beschreibung 

|`pattern` |`'@user\*.ps1'` |Setzt die Reichweite der nachfolgenden Optionen. Hier kann auch mit Wildcards gearbeitet werden. Dann beziehen sich die nachfolgenden Optionen auf alle Plugins, auf die der Ausdruck zutrifft. Führend wird bestimmt, ob das Plugin direkt aus dem Installations-, oder aus dem Datenverzeichnis ausgeführt werden soll.
|`run` |`*yes*/no` |Bestimmt, ob die Ausführung eines Plugins unterdrückt werden soll.
|`async` |`*yes*/no` |Führt ein Plugin asynchron aus und legt die Daten in einer Datei ab. Bei synchroner Ausführung wird die Ausgabe direkt an den Agenten übergeben.
|`timeout` |`*60*` |Setzt die maximale Ausführzeit. Danach wird das Plugin beendet, auch wenn keine Ausgabe gekommen ist. Der Standardwert orierntiert sich an dem Standard für das Abfrageintervall des Agenten.
|`cache_age` |`*60*` |Legt in Sekunden fest, wie lange eine Ausgabe gültig ist. Wenn `async` aktiviert ist, wird automatisch ein Cache von ??? Sekunden angelegt.
|`retry_count` |`*1*` |Die Anzahl, wie oft ein Plugin fehlschlagen darf, bevor eine Ausgabe aus dem Cache verworfen wird.
|`description` |`'Text'` |Hier können Sie einen freien Text eintragen, der den Logs angefügt werden soll.
|===


Eine Konfiguration für das Veeam Plugin sieht dann zum Beispiel so aus. Der
Auszug ist gekürzt und enthält nur den relevanten Teil für das Beispiel:

.C:ProgramData\checkmk\agent\check_mk.user.yml
[{file}]
----
plugins:
    enabled: yes
    execution:
        - pattern: $CUSTOM_PLUGINS_PATH$\veeam_backup_status.ps1
          async: yes
          timeout: 120
          cache_age: 300
          retry_count: 2
----

Das Plugin wird nach der Definition oben Asynchron alle fünf Minuten (300
Sekunden) ausgeführt und darf dabei maximal zwei Minuten (120 Sekunden)
laufen. Falls das Plugin in diesen Timeout läuft, wird ein zweites Mal
versucht ein Ergebnis zu bekommen.


=== Plugins über die Bakery installieren

{cee-only}
Die von {CMK} mitglieferten Plugins können über die
link:wato_monitoringagents.html#bakery[Agent Bakery] konfiguriert werden. Diese sorgt
sowohl für die Installation des Plugins selbst, als auch für die korrekte
Erstellung der Konfigurationsdatei, falls eine notwendig sein sollte.

Jedes Plugin wird über eine Agentenregel konfiguriert. Sie finden die passenden Regelsätze in [.guihint]#Monitoring agentes > Agent plugins#:

image::agent_linux_rules_agent_plugins.png[]


=== Plugins von Hand ausführen

Da Agentenplugins ausführbare Programme sind, können Sie diese zu Test-
und Diagnosezwecken auch von Hand ausführen. Es gibt allerdings Plugins,
welche bestimmte vom Agenten gesetzte Umgebungsvariablen brauchen, um
z.B. ihre Konfigurationsdatei zu finden. Setzen Sie diese gegebenenfalls
von Hand, wenn Sie in dem Skript oder Programm benötigt werden.

== Absicherung

=== Vorüberlegung

Wie auch bei dem Linux-Agent muss auch der Zugriff auf den Agent für Windows
abgesichert werden. Immerhin handelt es sich um potentiell sensible Server, die
vor Angriffen von außen geschützt werden müssen. Aus dem Grund gelten hier
auch die gleichen Grundgedanken, wie unter link:agent_linux.html#security[Linux]. Auch
unter Windows liest der Agent keinerlei Daten vom Netzwerk, so dass ein
Angreifer über den Überwachungsport 6556 niemals Befehle oder Skripte
einschleusen kann.

Wird das überwachte System über eine unsichere (Internet-)Verbindung
abgefragt, werden zusätzliche Maßnahmen notwendig. So verfügt der Agent
über eine optionale eingebaute Verschlüsselung, um die übermittelten
Daten vor Angriffen zu schützen, welche den Netzwerkverkehr. Auf neueren
Windows-Versionen ist zusätzlich natives SSH möglich, so dass eine
Verschlüsselung über die gesamte Verbindungsdauer gewährleistet werden
kann, wie man das unter Linux bereits kennt.

Diese und andere Methoden der Absicherung werden im Folgenden näher beschrieben.


=== Beschränkung des Zugriffs über IP-Adressen

Die Einschränkung auf bestimmte IP-Adressen können Sie zwar auch über die
link:agent_windows.html#firewall[Firewall] konfigurieren. Zusätzlich bietet aber
auch der Agent selbst die Möglichkeit, Anfragen von fremden IP-Adressen
schlicht zu ignorieren. Fügen Sie der Konfigurationsdatei lediglich die
folgende Einschränkung in den globalen Optionen hinzu. Beachten Sie, dass
davor oder danach noch andere Parameter in der Konfigurationsdatei gesetzt
sein können und dies nur ein Ausschnitt ist:

.C:\ProgrammData\CheckMK\Agent\check_mk.user.yml
[{file}]
----
global:
  only_from: 127.0.0.1/32 192.168.42.73/32
----

Wie in dem Beispiel gut zu sehen, können Sie prinzipiell beliebig viele
Subnetze erlauben. Mit einem `/32` geben Sie z.B. ein Subnetz der
Größe 1 an, so dass nur diese eine Adresse erlaubt ist, während sie mit
mit `192.168.42.0/24` alle Adressen zwischen `192.168.42.0`
und `192.168.42.255` erlauben.

{cee-only}
In der Agentenbäckerei können Sie die erlaubten IP-Adressen über den Regelsatz
[.guihint]#Monitoring agents > Rules > Generic options > Restrict agent access via IP address#
per WATO konfigurieren.

Natürlich kann ein Angreifer sehr leicht seine IP-Adresse fälschen und so
eine Verbindung zum Agenten bekommen. Aber dann ist es sehr wahrscheinlich,
dass er die Antwort nicht bekommt -- weil diese zum echten Monitoringserver geht.
Oder er bekommt sie tatsächlich, aber der CMK-Server bekommt keinerlei Daten
und wird sehr bald einen Fehler melden.


=== Aufruf über SSH

Neuere Versionen von Windows haben eine native Unterstützung für
SSH. Aber auch bei älteren Versionen können Sie einen SSH-Server über
link:https://www.cygwin.com[Cygwin] nachrüsten und damit eine
identische Konfiguration nachstellen, wie Sie unter link:agent_linux.html#ssh[Linux]
möglich ist. Beachten Sie dabei die aktuellen Hilfestellungen seitens Cygwin
oder Microsoft für die Einrichtung. Sobald ein SSH-Server gestartet und
erreichbar ist, ist die weitere Einrichtung identisch zu der unter Linux:
Sie richten die `authorized_keys` auf dem überwachten Host ein und
beschränken den Zugriff auf die Ausführung des Agenten.

Der Eintrag in der Datei authorized_keys ist auf Windows Hosts allerdings etwas
holprig, da hier viele Zeichen maskiert werden müssen. Orientieren Sie sich
bitte an dem folgenden Beispiel:

.~\.ssh\authorized_keys:
[{file}]
----
command="\"C:\\Program Files (x86)\\checkmk\\service\\check_mk_agent.exe\" test" ssh-rsa AAAAC3NzaC1lZDI1NTE5AAAAIGb6AaqRPlbEmDnBkeIW3Q6Emb5lr2QEbWEQLmA5pb48 mysite@mycmkserver
----

Beachten Sie, dass Sie den Windowsdienst danach stoppen können und auch eine
eventuell eingerichtete Firewallregel damit obsolet ist.
// Prinzipiell ist damit auch ein Betrieb ohne Installation nur mit dem Binary
// möglich. Aber das führt hier erst einmal zu weit.


=== Eingebaute Verschlüsselung

Der Windows-Agent (wie auch sein Linux-Pendant) kann
seine Daten ohne Zusatzmittel selbst verschlüsseln.
Dies ist streng genommen kein Ersatz für eine Zugangskontrolle. Da aber ein
Angreifer ja keine Befehle senden und mit verschlüsselten Ausgabedaten
nichts anfangen kann, kommt es einer solchen schon sehr nahe.

Der Aufwand für die Verwendung der Verschlüsselung und die nötige
zusätzliche CPU-Last sind beide geringer, als bei der oben beschriebenen
Methode mit SSH, welche wir aber nach wie vor bei der Übertragung über das
Internet empfehlen.

Die Verschlüsselung braucht natürlich sowohl auf dem Agenten als auch auf
dem Server eine passende Konfiguration. Diese kann entweder von Hand
erstellt werden ({CRE}) oder mit der Agentenbäckerei ({CEE}).


==== Aufsetzen ohne Bakery

Auch ohne Agentenbäckerei geht der erste Schritt über WATO: Anlegen
einer Regel im Regelsatz [.guihint]#Host & Service Parameters > Access to agents > Encryption#.
Die Regel soll auf alle Hosts greifen, für die Sie Verschlüsselung einsetzen
möchten. SNMP-Hosts ignorieren diese Einstellung, daher müssen Sie sie nicht
explizit ausschließen.

image::encrypt_agent.png[]

Wichtig ist die Einstellung für [.guihint]#Encryption for agent#. Solange Sie
die Regel auf dem Default [.guihint]#Disable# lassen, bleibt natürlich alles
beim Alten. Sie haben also die Wahl zwischen:

* [.guihint]#Enable#: Verschlüsselung wird aktiviert, aber Daten von Agenten ohne Verschlüsselung werden weiter akzeptiert.
* [.guihint]#Enforce#: Verschlüsselung wird aktiviert, nur noch verschlüsselte Daten werden akzeptiert.

Sinnvoll ist es, zunächst mit [.guihint]#Enable# zu beginnen. Sobald Sie meinen, dass alle Agenten auf
Verschlüsselung umgestellt sind, stellen Sie auf [.guihint]#Enforce#, um dadurch Hosts zu finden,
die noch Daten im Klartext senden.

Die Verschlüsselung funktioniert mit einem gemeinsamen Passwort, das Sie hier
angeben und sowohl auf dem {CMK}-Server als in der Konfiguration des Agenten im Klartext
gespeichert werden muss („Shared secret“). Wählen Sie ein zufälliges Passwort
aus und halten Sie es parat für den zweiten Schritt: die Konfiguration des Agenten.

Auf dem Windows-Server fügen Sie nun das Passwort der Konfiguration des Agenten hinzu. Auch diese kommen in den globalen Optionen rein:

.C:\ProgrammData\CheckMK\Agent\check_mk.user.yml
[{file}]
----
global:
  encrypted: yes
  passphrase: MyPassword
----

Jetzt können Sie folgende Tests machen (siehe dazu auch den
link:cmk_commandline.html[Artikel über die Kommandozeile von {CMK}]):

* Ein Aufruf von `check_mk_agent` auf dem Zielsystem muss wirren Zeichensalat ausgeben.
* Ein `telnet myhost123 6556` vom {CMK}-Server muss den gleichen Zeichensalat ausgeben.
* Ein `cmk -d myshost123` auf dem {CMK}-Server muss die sauberen Klartextdaten anzeigen.


==== Aufsetzen mit der Bakery

{cee-only}
Das Aufsetzen der Verschlüsselung mit der Agentenbäckerei ist sehr einfach. Mit dem Erstellen
der gerade beschriebenen Regel sind Sie im Grunde fertig. Sie brauchen nur noch neue Agenten
zu backen und zu verteilen. Die Datei `/etc/check_mk/encryption.cfg` wird automatisch
für Sie erzeugt und mit in die Agentenpakete eingebaut.


== Überwachen von Windows per SNMP

Es gibt ein paar wenige Situationen, in denen eine Überwachung per SNMP
*zusätzlich* zum normalen Agenten sinnvoll sein kann. Und zwar ist
das der Fall, wenn entweder eine eigene Anwendungssoftware oder ein
Hardwareüberwachungstool des Serverherstellers Überwachungsdaten nur
per SNMP liefern und -- entweder aufgrund der eingesetzten Windowsversion
oder weil es für die Anwendung keine Commandlets gibt -- eine Abfrage über
Powershell nicht möglich ist.

Setzen Sie in so einem Fall in den Eigenschaften des Hosts im WATO
im Kasten [.guihint]#DATA SOURCES# die Einstellung [.guihint]#SNMP# auf die geeignete
Verbindungsart (snmpv2/3 oder snmpv1). Services, die sowohl per SNMP als auch per {CMK}-Agent
verfügbar sind (z.B. CPU-Auslastung, Dateisysteme, Netzwerkkarten), werden
dann automatisch vom {CMK}-Agenten geholt und nicht per SNMP. Damit wird
eine Doppeltübertragung automatisch vermieden.


// H1:Hardware überwachen
//
// LI:OpenHardwareMonitor


[#files]
== Dateien und Verzeichnisse

=== Pfade auf dem überwachten Host

[cols="60,~"]
|===
|Pfad |Bedeutung 

|C:\Program Files (x86)\checkmk\service\ |Installationsverzeichnis für die programmspezifischen Dateien. Hier befindet sich auch der eigentliche Agent `check_mk_agent.exe`
|C:\ProgramData\checkmk\agent\ |Installationsverzeichnis für die hostspezifischen Dateien. Hier befinden sich Erweiterungen, Logs und Konfigurationsdateien, welche spezifisch für diesen Host gelten.
|C:\ProgrammData\checkmk\agent\check_mk.user.yml |Konfigurationsänderungen durch den Benutzer werden hier hinterlegt.
|C:\ProgrammData\checkmk\agent\bakery\check_mk.bakery.yml |Konfigurationsanpassungen durch die Bakery sind hier gespeichert.
|C:\ProgrammData\checkmk\agent\plugins |Hier werden die Plugins abgelegt, welche automatisch vom Agenten ausgeführt werden sollen.
|C:\ProgrammData\checkmk\agent\local |Das Verzeichnis für eigene link:localchecks.html[local-Skripten]
|C:\ProgrammData\checkmk\agent\mrpe |MRPE-Erweiterungen können hier gespeichert werden.
|C:\ProgrammData\checkmk\agent\backup |Nach jeder Änderungen des {CMK}-Agenten-Service wird von der Benutzerkonfiguration hier ein Backup angelegt.
|===



=== Pfade auf dem {CMK}-Server

[cols="45,~"]
|===
|Pfad |Bedeutung 

|local/share/check_mk/agents/custom/ |Basisverzeichnis für eigene Dateien, die mit einem gebackenen Agenten mit ausgeliefert werden sollen.
|share/check_mk/agents/windows/ |Die Agenten und ihre MSI-Pakete sind hier hinterlegt. In diesem Verzeichnis finden Sie auch Konfigurationsbeispiele und alle Plugins für den Agenten.
|===



