include::global_attr.adoc[]
= Dynamische Hostkonfiguration
:revdate: 2019-10-07
:title: Überwachen von dynamischen Infrastrukturen
:description: {CMK} kann ephemere Infrastrukturen durch dynamisches Hinzufügen und Löschen von Hosts in einem vollautomatischen Verfahren verwalten.

{related-start}
link:piggyback.html[Der Piggyback-Mechanismus]
link:monitoring_aws.html[Amazon Web Services (AWS) überwachen]
link:monitoring_azure.html[Microsoft Azure überwachen]
link:monitoring_kubernetes.html[Kubernetes überwachen]
link:monitoring_docker.html[Docker überwachen]
link:monitoring_vmware.html[VMWare ESXi überwachen]
{related-end}


== Einleitung

[{image-left}]
image::icon_dcd_connections.png[width=7%]

In Cloud- und Containerumgebungen ist es immer öfter der Fall, dass zu überwachende
Hosts automatisch entstehen und vergehen. Die Konfiguration des Monitorings hier
aktuell zu halten, ist manuell nicht mehr sinnvoll möglich. Aber auch klassische
Infrastrukturen wie z.B. VMware-Cluster können sehr dynamisch sein, und selbst wenn
eine manuelle Pflege hier noch möglich ist, ist sie doch auf jeden Fall lästig.

Ab Version {v16} der {CEE} unterstützt Sie {CMK} bei diesem
Thema mit einem neuen Werkzeug: dem _Dynamic Configuration Daemon_
oder kurz _DCD_. Die dynamische Konfiguration von Hosts bedeutet, dass
aufgrund von Informationen aus der Überwachung von link:monitoring_aws.html[AWS],
link:monitoring_azure.html[Azure], link:monitoring_kubernetes.html[Kubernetes],
link:monitoring_vmware.html[VMware] und anderen Quellen vollautomatisch Hosts in das
Monitoring aufgenommen und auch wieder entfernt werden können.

Der DCD ist dabei sehr generisch gehalten und nicht auf das Anlegen von Hosts
beschränkt. Er bildet die Grundlage für alle künftigen Erweiterungen von {CMK},
welche dynamisch die Konfiguration anpassen. Das kann z.B. auch
das Verwalten von Benutzern bedeuten. Zu diesem Zweck arbeitet der DCD
mit sogenannten _Konnektoren_. Jeder Konnektor kann aus einer ganz
bestimmten Art von Quelle Informationen holen und hat dazu seine eigene
spezifische Konfiguration.

Mit speziellen Konnektoren kann es in Zukunft auch viel einfacher werden,
Hosts aus einer vorhandenen CMDB automatisch nach {CMK} zu übernehmen.


== Verwalten von Hosts mit dem DCD

=== Der Piggyback-Konnektor

In Version {v16} von {CMK} ist der DCD zunächst
nur mit einem einzigen Konnektor ausgestattet: demjenigen für
link:piggyback.html[Piggyback-Daten]. Dieser ist jedoch sehr universell, denn der
Piggyback-Mechanismus wird von {CMK} in allen Situationen verwendet, wo die
Abfrage von einem Host (meist per Spezialagent) Daten zu anderen Hosts liefert
(meist virtuelle Maschinen oder Cloudobjekte).

Hier sind einige Beispiele,
wo {CMK} bei der Überwachung Piggyback einsetzt:

* link:monitoring_aws.html[AWS]
* link:monitoring_azure.html[Azure]
* link:monitoring_kubernetes.html[Kubernetes]
* link:monitoring_docker.html[Docker]
* link:monitoring_vmware.html[VMware]

In allen diesen Fällen werden beim Monitoring automatisch Daten zu anderen
Hosts (z.B. den VMs) geholt, die nicht direkt per Netzwerk angesprochen werden und auf
denen auch kein {CMK}-Agent laufen muss. Mit dem DCD können Sie solche Hosts
automatisch in WATO aufnehmen und auch wieder entfernen lassen, um so immer
zeitnah die Realität abzubilden.

Dazu analysiert der DCD die vorhandenen Piggyback-Daten, vergleicht, welche
der Hosts bereits in WATO vorhanden sind und legt die fehlenden Hosts neu
an bzw. entfernt inzwischen weggefallene.  Dabei sind Hosts, welche vom DCD
automatisch angelegt wurden, trotzdem für Sie in WATO editierbar.


=== Dynamische Konfiguration einrichten

==== Sind Piggyback-Daten da?

Als einzige Voraussetzung, um den DCD zu nutzen, benötigen Sie
Piggyback-Daten. Diese haben Sie immer dann, wenn Sie das Monitoring für AWS,
Azure und Co. korrekt aufgesetzt haben. Sie können das auch leicht auf der
Kommandozeile überprüfen, denn die Piggyback-Daten werden von {CMK} im Verzeichnis `tmp/check_mk/piggyback`
angelegt:

[{shell}]
----
{c-omd} ls tmp/check_mk/piggyback
myvm01  myvm02  myvm03
----

Wenn dieses Verzeichnis nicht leer ist, dann wurden in dieser Instanz Piggyback-Daten erzeugt.

==== Generelle Einstellungen eines Konnektors

Gehen Sie nun in die icon:icon_folder[] Hostverwaltung von WATO. Dort finden
Sie den Knopf icon:icon_dcd_connections[] [.guihint]#Dynamic config#. Dieser bringt Sie zur Konfiguration
des DCD bzw. von dessen Konnektoren:

[{image-border}]
image::dcd_connections_empty.png[]

Legen Sie mit icon:icon_new[] [.guihint]#New connection# eine neue Verbindung an.
Der erste Teil der Konfiguration sind die [.guihint]#General properties#:

image::dcd_connection_general.png[]

Hier vergeben Sie, wie so oft, eine eindeutige ID dieser Verbindung und
einen Titel. Wichtig ist ferner die Auswahl der {CMK}-Instanz, auf der dieser
Konnektor laufen soll. Da Piggyback-Daten immer nur lokal verarbeitet werden
können, muss der Konnektor immer einer konkreten Instanz zugeordnet werden.

==== Eigenschaften des Konnektors

Der zweite Teil sind die [.guihint]#Connection properties#:

image::dcd_connection_properties.png[]

Hier ist bereits der Konnektor [.guihint]#Piggyback data# vorausgewählt
(und aktuell auch der einzig mögliche).

Mit dem [.guihint]#Sync interval# bestimmen Sie, wie oft der Konnektor nach neuen Hosts suchen
soll. Wenn Sie das regulären Checkintervall von einer Minute beibehalten haben, macht es
keinen Sinn, das wesentlich öfter zu machen, da ja maximal einmal pro Minute eine Änderung
der Piggyback-Daten stattfinden kann. In höher dynamischen Umgebungen können Sie sowohl
Checkinterval als auch das Konnektorintervall auch auch deutlich kleinere Werte einstellen.
Dies hat allerdings auch eine höhere CPU-Auslastung auf dem {CMK}-Server zur Folge.

Wichtig ist jetzt, dass Sie mindestens eine [.guihint]#Piggyback creation option# hinzufügen ([.guihint]#Add new element#).

image::dcd_connection_properties_2.png[]

Hier können Sie zwei wichtige Dinge festlegen: In welchem Ordner die Hosts erzeugt werden sollen (hier z.B. [.guihint]#AWS Cloud 02#)
und welche Hostattribute gesetzt werden sollen. Vier wichtige Attriute sind dabei voreingestellt, welche für Piggyhosts
meistens Sinn ergeben:

. Kein Monitoring per SNMP
. Kein {CMK}-Agent auf dem Host selbst (Daten kommen ja per Piggyback)
. Dass Piggyback-Daten immer erwartet werden (und es einen Fehler gibt, wenn diese fehlen)
. Und dass die Hosts keine IP-Adresse haben

*Wichtig:* Nur wenn Sie [.guihint]#Delete vanished hosts# aktivieren, werden Hosts auch
wieder entfernt, wenn Sie in Ihrer dynamischen Umgebung verschwunden sind.

Möchten Sie nicht automatisch alle Hosts anlegen,
so können Sie das mit der Option [.guihint]#Only add matching hosts# mit einem link:regexes.html[regulären Ausdruck]
einschränken. Wichtig: gemeint sind hier die Hosts, welche _angelegt_ werden und _nicht_
die Hosts, über den Sie die Überwachung von z.B. AWS eingerichtet haben.

Letzteres können Sie mit der Option [.guihint]#Only add hosts from matching source hosts# erreichen. Diese
bezieht sich auf die Namen der Hosts, welche Piggyback-Daten _erzeugen_.


==== Activate Changes

Zwei weitere Optionen befassen sich mit dem automatischen Aktivieren von
Änderungen -- für den Fall, dass wirklich Hosts angelegt oder entfernt
wurden. Denn nur dadurch tauchen diese dann auch im operativen Monitoring auf.

Wenn das [.guihint]#Activate changes# bei Ihrer Installation sehr lange dauert, können Sie mit
[.guihint]#Group "Activate changes"# dafür sorgen, dass das nach Möglichkeit nicht sofort bei jedem neuen
Host sofort passiert, sondern man etwas „zusammenkommen lässt“.

Ferner können Sie das automatische Aktivieren von Änderungen auch für bestimmte Tageszeiten
komplett verbieten -- z.B. für die Tageszeiten, wo ihr Monitoringsystem aktiv betreut wird.
Denn wenn der DCD Änderungen aktiviert, werden auch alle anderen Änderungen aktiv, die Sie
oder ein Kollege gerade gemacht haben!

Nachdem Sie gespeichert haben, erscheint der Konnektor in der Liste. Er kann aber
noch nicht ausgeführt werden, bevor Sie ein [.guihint]#Activate Changes# durchgeführt haben.
Erst dadurch nimmt er seinen Dienst auf. Lassen Sie sich daher nicht von der Meldung
[.guihint]#Failed to get the status from DCD (The connection 'piggy01' does not exist)#,
irritieren, welche zunächst nach dem Speichern erscheint.

== Den Konnektor in Betrieb nehmen

=== Erstes Aktivieren

Nach dem Speichern der Konnektoreigenschaften und einem [.guihint]#Activate Changes# nimmt die
Verbindung automatisch ihren Betrieb auf. Das kann so schnell gehen, dass Sie bereits
direkt nach dem Aktivieren der Änderungen sofort sehen, wie in WATO Hosts angelegt wurden:

image::dcd_pending_changes.png[]

Wenn Sie diese Seite kurz darauf neu laden, sind diese Änderungen wahrscheinlich schon
wieder verschwunden, weil sie ja vom DCD automatisch aktiviert wurden. Die neuen Hosts
sind dann bereits im Monitoring und werden regelmäßig überwacht.


== Automatisches Löschen von Hosts

=== Wann werden Hosts entfernt?

Wie oben erwähnt, können Sie den DCD selbstverständlich Hosts, die es
„nicht mehr gibt“ automatisch aus WATO löschen lassen. Das klingt erstmal
sehr logisch. Was _genau_ das „nicht mehr gibt“ allerdings bedeutet,
auf den zweiten Blick doch etwas komplexer, da es verschiedene Fälle zu
betrachten gibt. Wir gehen in folgender Übersicht davon aus, dass Sie
die Löschoption aktiviert haben. Denn sonst werden grundsätzlich nie
Hosts automatisch entfernt.

[cols="30,~"]
|===
|Situation |Was geschieht? 

|Entfernen eines DCD-Konnektors |Wenn Sie eine DCD-Verbindung stilllegen ([.guihint]#do not activate this dynamic configuration connection#) oder ganz entfernen, bleiben alle Hosts, die durch diese Verbindung erzeugt wurden, erhalten. Bei Bedarf müssen Sie diese von Hand löschen.
|Piggyback-Host wird nicht mehr überwacht |Wenn Sie den Host, über den Sie Ihre Cloud- oder Containerumgebung überwachen, aus dem Monitoring entfernen, erzeugt dieser natürlich keine Piggyback-Daten mehr. In diesem Fall werden die automatisch erzeugten Hosts _nach einer Stunde_ automatisch entfernt.
|Piggyback-Host ist nicht erreichbar |Wenn Ihre Cloudumgebung mal nicht erreichbar und der {CMK}-Service, der diese abfragt, auf {CRIT} geht, so bleiben die erzeugten Hosts _auf unbestimmte Zeit_ im Monitoring. Hier gibt es keinen einstündigen Timeout!
|Der {CMK}-Server selbst ist gestoppt |Ein Stoppen des ganzen Monitorings führt zwar dazu, dass Piggyback-Daten veralten. Aber natürlich werden angelegte Hosts deswegen _nicht_ gelöscht. Das gleiche gilt, wenn der {CMK}-Server neu gebootet wird (wodurch vorübergehend alle Piggyback-Daten verloren gehen, da diese in der RAM-Disk liegen).
|Ein Host ist nicht mehr in den Piggyback-Daten enthalten |Das ist quasi der Normalfall: Ein Host in der Cloud-/Containerumgebung ist verschwunden. In diesem Fall wird er _sofort_ aus dem Monitoring entfernt.
|===


=== Konfigurationsmöglichkeiten

Neben der Frage, ob Hosts überhaupt automatisch entfernt werden sollen, gibt es bei den Konnektoreneigenschaften
noch drei weitere Optionen, die das Löschen beeinflussen und die wir vorhin übersprungen haben:

image::dcd_deletion_tuning.png[width=70%]

Die erste Einstellung -- [.guihint]#Prevent host deletion right after
initialization# -- betrifft einen kompletten Neustarts des {CMK}-Servers selbst.
Denn in dieser Situation fehlen erstmal Piggyback-Daten von allen Hosts, bis
diese zum ersten Mal abgefragt wurden. Um ein sinnloses Löschen und
Wiedererscheinen von Hosts zu vermeiden (welches auch mit wiederholten Alarmen
zu schon bekannten Problemen einhergeht), wird per Default in den ersten 10
Minuten auf ein Löschen generell verzichtet. Diese Zeit können Sie hier
einstellen.

Die Option [.guihint]#Keep hosts while piggyback source sends piggyback data
only for other hosts for# behandelt aber den Fall, dass schon noch
Piggyback-Daten kommen, allerdings für einige der automatisch angelegten Hosts
nicht mehr. Hier können Sie festlegen, für welchen Zeitraum Hosts für die eben
keine Daten mehr von der Piggyback-Quelle kommen, noch erhalten bleiben sollen,
bevor WATO sie dann automatisch entfernt. Das ist der normale Fall wenn z.B.
virtuelle Maschinen oder Clouddienste nicht mehr vorhanden sind. Wenn Sie
möchten, dass die entsprechenden Objekte aus {CMK} dann zeitnah verschwinden,
dann setzen Sie hier eine entsprechend kurze Zeitspanne.

Die Option [.guihint]#Set period how long outdated piggyback data is treated as
valid# behandelt den Fall, dass ein Host, aufgrund dessen Monitoring-Daten
etliche Hosts automatisch angelegt wurden, keine Piggyback-Daten mehr liefert.
Die vorhandenen Daten werden dann für den hier eingestellten Zeitraum noch als
gültig erachtet. Das kann z.B. der Fall sein, wenn ein Zugriff auf AWS und Co.
nicht mehr funktioniert. Oder natürlich auch, wenn Sie den Spezialagenten aus
der Konfiguration entfernt haben. Die automatisch erzeugten Hosts bleiben dann
noch die eingestellte Zeit im System, bevor sie aus WATO entfernt werden.

== Diagnosemöglichkeiten

=== Ausführungshistorie

Wenn Sie dem DCD bei der Arbeit zusehen möchten, finden Sie in der Liste der Konnektoren bei jedem Eintrag
das Symbol icon:icon_dcd_history[]. Dieses führt Sie zur Ausführungshistorie:

image::dcd_execution_history.png[]

Im abgebildeten Beispiel sehen Sie einen Fehler, der beim Erzeugen der Konfiguration auftritt: Der
Host mit dem Namen `Guest_Introspection_(4)` konnte nicht angelegt werden, weil durch die
runden Klammern im Namen sich kein für {CMK} gültiger Hostname ergibt.

=== Das WATO Auditlog

Wenn Sie im WATO auf der Seite sind, wo Sie Änderungen aktivieren können, finden Sie dort einen
Knopf mit dem Namen [.guihint]#Audit Log#. Dieser bringt Sie zu einer Liste aller Änderungen, die in
WATO gemacht wurden -- egal ob diese bereits aktiviert wurden oder nicht. Suchen Sie nach
Einträge vom Benutzer `automation`. Unter diesem Account arbeitet der DCD und erzeugt
Änderungen. So können Sie nachvollziehen, wann er welchen Host angelegt oder entfernthat.

=== Die Logdatei des DCD

Die Logdatei des DCD finden Sie auf der Kommandozeile in der Datei `var/log/dcd.log`.
Hier ist ein Beispiel, welches zu obiger Abbilung passt. Auch hier finden Sie die Fehlermeldung,
dass ein bestimmter Host nicht angelegt werden konnte:

.var/log/dcd.log
[{file}]
----
2019-09-25 14:45:22,916 [20] [cmk.dcd] ---------------------------------------------------
2019-09-25 14:45:22,916 [20] [cmk.dcd] Dynamic Configuration Daemon (1.6.0-2019.09.25) starting (Site: mysite, PID: 7450)...
2019-09-25 14:45:22,917 [20] [cmk.dcd.ConnectionManager] Initializing 0 connections
2019-09-25 14:45:22,918 [20] [cmk.dcd.ConnectionManager] Initialized all connections
2019-09-25 14:45:22,943 [20] [cmk.dcd.CommandManager] Starting up
2019-09-25 15:10:58,271 [20] [cmk.dcd.Manager] Reloading configuration
2019-09-25 15:10:58,272 [20] [cmk.dcd.ConnectionManager] Initializing 1 connections
2019-09-25 15:10:58,272 [20] [cmk.dcd.ConnectionManager] Initializing connection 'piggy01'
2019-09-25 15:10:58,272 [20] [cmk.dcd.ConnectionManager] Initialized all connections
2019-09-25 15:10:58,272 [20] [cmk.dcd.ConnectionManager] Starting new connections
2019-09-25 15:10:58,272 [20] [cmk.dcd.piggy01] Starting up
2019-09-25 15:10:58,273 [20] [cmk.dcd.ConnectionManager] Started all connections
2019-09-25 15:10:58,768 [40] [cmk.dcd.piggy01] Creation of "Guest_Introspection_(4)" failed: Please enter a valid hostname or IPv4 address. Only letters, digits, dash, underscore and dot are allowed.
----


[#files]
== Dateien und Verzeichnisse

[cols="30,~"]
|===
|Pfad |Bedeutung 

|tmp/check_mk/piggyback |Hier entstehen Piggyback-Daten. Für jeden in den Piggyback-Daten enthaltenen Zielhost entsteht ein Verzeichnis.
|var/log/dcd.log |Logdatei des Dynamic Configuration Daemon (DCD)
|===


